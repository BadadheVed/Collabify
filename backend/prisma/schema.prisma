// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String

  teams         TeamMember[]
  tasks         Task[]         @relation("AssignedTasks")
  comments      Comment[]
  notifications Notification[]

  sentInvites     Invite[]        @relation("SentInvites")
  receivedInvites Invite[]        @relation("ReceivedInvite")
  createdAt       DateTime        @default(now())
  Team            Team[]
  Invite          Invite[]
  Project         Project[]
  Task            Task[]
  documents       Document[]      @relation("UserDocuments")
  ProjectMember   ProjectMember[]
}

model Team {
  id        String @id @default(cuid())
  name      String
  createdBy String
  creator   User   @relation(fields: [createdBy], references: [id])

  projectId String // ✅ FK to Project
  project   Project @relation(fields: [projectId], references: [id])

  members   TeamMember[]
  invites   Invite[]
  documents Document[] // ✅ Add this - One team can have many documents
  createdAt DateTime     @default(now())
}

model ProjectMember {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  role      Role     @default(MEMBER)
  joinedAt  DateTime @default(now())

  @@unique([userId, projectId])
}

model TeamMember {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  team     Team     @relation(fields: [teamId], references: [id])
  teamId   String
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  @@unique([userId, teamId])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())

  Task Task[]

  teams         Team[]
  ProjectMember ProjectMember[]
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus   @default(TODO)
  priority     Int          @default(1)
  dueDate      DateTime?
  assignee     User?        @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assigneeId   String?
  project      Project      @relation(fields: [projectId], references: [id])
  projectId    String
  assignedTo   User         @relation(fields: [assignedToId], references: [id])
  assignedToId String
  comments     Comment[]
  attachments  Attachment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Attachment {
  id         String   @id @default(cuid())
  url        String
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     String
  uploadedAt DateTime @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  message   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Invite {
  id            String   @id @default(cuid())
  token         String   @unique
  email         String? // Invite sent to this email
  role          Role     @default(MEMBER) // Role to assign on acceptance
  team          Team     @relation(fields: [teamId], references: [id])
  teamId        String
  invitedBy     User     @relation("SentInvites", fields: [invitedById], references: [id])
  invitedById   String
  invitedUser   User?    @relation("ReceivedInvite", fields: [invitedUserId], references: [id])
  invitedUserId String?
  expiresAt     DateTime
  used          Boolean  @default(false)
  createdAt     DateTime @default(now())
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
}

model Document {
  id        String   @id @default(uuid())
  title     String
  content   Json?
  teamId    String // ✅ Change from projectId to teamId
  team      Team     @relation(fields: [teamId], references: [id]) // ✅ Reference Team instead of Project
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  ownerId   String
  owner     User     @relation("UserDocuments", fields: [ownerId], references: [id])
}
